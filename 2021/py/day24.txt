inp w       inp w       inp w       inp w       inp w       inp w       inp w       inp w       inp w       inp w       inp w       inp w       inp w       inp w
mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0     mul x 0
add x z     add x z     add x z     add x z     add x z     add x z     add x z     add x z     add x z     add x z     add x z     add x z     add x z     add x z
mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26    mod x 26
div z 1     div z 1     div z 1     div z 26    div z 1     div z 1     div z 1     div z 26    div z 1     div z 26    div z 26    div z 26    div z 26    div z 26
add x 13    add x 12    add x 10    add x -11   add x 14    add x 13    add x 12    add x -5    add x 10    add x 0     add x -11   add x -13   add x -13   add x -11
eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w     eql x w
eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0     eql x 0
mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0
add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25    add y 25
mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x
add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1     add y 1
mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y     mul z y
mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0     mul y 0
add y w     add y w     add y w     add y w     add y w     add y w     add y w     add y w     add y w     add y w     add y w     add y w     add y w     add y w
add y 8     add y 16    add y 4     add y 1     add y 13    add y 5     add y 0     add y 10    add y 7     add y 2     add y 13    add y 15    add y 14    add y 9
mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x     mul y x
add z y     add z y     add z y     add z y     add z y     add z y     add z y     add z y     add z y     add z y     add z y     add z y     add z y     add z y


w = 0; x = 0; y = 0; z = 0

def process_one(input, a: int, b: int, c: int):
    w = input.pop(0)

    x *= 0                      #
    x += z                      #
    x %= 26                     #
    z //= A                     #
    x += B                      # x = ((z % 26) // A) + B

    x = 1 if x == w else 0      #
    x = 1 if x == 0 else 0      # x = (x != w) ? 0 : 1

    y *= 0                      #
    y += 25                     #
    y *= x                      #
    y += 1                      #
    z *= y                      # z *= (25*x)+1

    y *= 0                      #
    y += w                      #
    y += C                      #
    y *= x                      #
    z += y                      # z += (w+C)*x

#define ROUND(W, A, B, C) { x = ((z % 26) // A) + B; x = (x != W) ? 0 : 1; z *= (25*x)+1; z += (W+C)*x; }

int brute_force() {
    int x = 0, y = 0, z = 0;

    for (int a = 1; a < 10; a++) {
        for (int b = 1; b < 10; b++) {
            for (int c = 1; c < 10; c++) {
                for (int d = 1; d < 10; d++) {
                    for (int e = 1; e < 10; e++) {
                        for (int f = 1; f < 10; f++) {
                            for (int g = 1; g < 10; g++) {
                                for (int h = 1; h < 10; h++) {
                                    for (int i = 1; i < 10; i++) {
                                        for (int j = 1; j < 10; j++) {
                                            for (int k = 1; k < 10; k++) {
                                                for (int l = 1; l < 10; l++) {
                                                    for (int m = 1; m < 10; m++) {
                                                        for (int n = 1; n < 10; n++) {
                                                            ROUND(a,  1,  13,  8);
                                                            ROUND(b,  1,  12, 16);
                                                            ROUND(c,  1,  10,  4);
                                                            ROUND(d, 26, -11,  1);
                                                            ROUND(e,  1,  14, 13);
                                                            ROUND(f,  1,  13,  5);
                                                            ROUND(g,  1,  12,  0);
                                                            ROUND(h, 26,  -5, 10);
                                                            ROUND(i,  1,  10,  7);
                                                            ROUND(j, 26,   0,  2);
                                                            ROUND(k, 26, -11, 13);
                                                            ROUND(l, 26, -13, 15);
                                                            ROUND(m, 26, -13, 14);
                                                            ROUND(n, 26, -11,  9);

                                                            if (z == 0) {
                                                                printf("Valid %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n",
                                                                    a, b, c, d, e, f, g, h, i, j, k, l, m, n);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
